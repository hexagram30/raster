// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/hexagram30/protocols/src/golang/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8e, 0xb1, 0x8b, 0x83, 0x30,
	0x14, 0x87, 0xef, 0xb8, 0xe3, 0x0e, 0x32, 0x1c, 0x5c, 0x2a, 0x1d, 0x1c, 0x3b, 0x75, 0x4a, 0xa4,
	0x42, 0xa1, 0xa3, 0x6e, 0x6e, 0xc1, 0x42, 0xf7, 0x18, 0x42, 0x0c, 0x18, 0x93, 0xbe, 0xc4, 0xa2,
	0xff, 0x7d, 0x31, 0xea, 0x50, 0x3a, 0x7e, 0xdf, 0x7b, 0x1f, 0xfc, 0x10, 0x52, 0xe0, 0x04, 0x71,
	0x60, 0x83, 0xc5, 0x5f, 0xdc, 0xe9, 0xf4, 0xac, 0x74, 0x68, 0x87, 0x86, 0x08, 0x6b, 0x68, 0x2b,
	0x47, 0xae, 0x80, 0x9b, 0x3c, 0xa3, 0xf1, 0x43, 0xd8, 0xce, 0x53, 0x0f, 0x62, 0x21, 0x2a, 0xac,
	0x31, 0xb6, 0x5f, 0xe2, 0xd3, 0x84, 0xd0, 0x55, 0xc2, 0x43, 0x0b, 0x59, 0xb0, 0x0a, 0x67, 0xe8,
	0x9b, 0xe9, 0x5e, 0xe1, 0x1d, 0x59, 0x9f, 0x66, 0xaa, 0xe5, 0x7d, 0x90, 0x3e, 0xa4, 0xff, 0xaf,
	0xd2, 0x75, 0xd3, 0xe1, 0x03, 0x5f, 0xd0, 0xef, 0x4d, 0x82, 0xd7, 0xb6, 0xc7, 0xfb, 0xed, 0xbe,
	0x8a, 0xad, 0x4b, 0xde, 0x7c, 0x4c, 0xcb, 0x23, 0x4a, 0xda, 0x51, 0x99, 0x3c, 0x23, 0xc0, 0x7d,
	0x90, 0x40, 0x5c, 0x43, 0xb8, 0xd3, 0xe5, 0x5f, 0x1d, 0xb1, 0x60, 0x15, 0x9b, 0x27, 0xb2, 0xcf,
	0xe6, 0x27, 0x6e, 0xcd, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x77, 0x36, 0x21, 0xf6, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceAPIClient is the client API for ServiceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceAPIClient interface {
	// Respond with what we got
	// Return "pong" for "ping"
	Ping(ctx context.Context, in *proto1.PingRequest, opts ...grpc.CallOption) (*proto1.PingReply, error)
	// Get version data
	Version(ctx context.Context, in *proto1.VersionRequest, opts ...grpc.CallOption) (*proto1.VersionReply, error)
}

type serviceAPIClient struct {
	cc *grpc.ClientConn
}

func NewServiceAPIClient(cc *grpc.ClientConn) ServiceAPIClient {
	return &serviceAPIClient{cc}
}

func (c *serviceAPIClient) Ping(ctx context.Context, in *proto1.PingRequest, opts ...grpc.CallOption) (*proto1.PingReply, error) {
	out := new(proto1.PingReply)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) Version(ctx context.Context, in *proto1.VersionRequest, opts ...grpc.CallOption) (*proto1.VersionReply, error) {
	out := new(proto1.VersionReply)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAPIServer is the server API for ServiceAPI service.
type ServiceAPIServer interface {
	// Respond with what we got
	// Return "pong" for "ping"
	Ping(context.Context, *proto1.PingRequest) (*proto1.PingReply, error)
	// Get version data
	Version(context.Context, *proto1.VersionRequest) (*proto1.VersionReply, error)
}

// UnimplementedServiceAPIServer can be embedded to have forward compatible implementations.
type UnimplementedServiceAPIServer struct {
}

func (*UnimplementedServiceAPIServer) Ping(ctx context.Context, req *proto1.PingRequest) (*proto1.PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedServiceAPIServer) Version(ctx context.Context, req *proto1.VersionRequest) (*proto1.VersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

func RegisterServiceAPIServer(s *grpc.Server, srv ServiceAPIServer) {
	s.RegisterService(&_ServiceAPI_serviceDesc, srv)
}

func _ServiceAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).Ping(ctx, req.(*proto1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).Version(ctx, req.(*proto1.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ServiceAPI",
	HandlerType: (*ServiceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ServiceAPI_Ping_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _ServiceAPI_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
